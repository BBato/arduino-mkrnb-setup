/*

 This sketch test the MKR NB 1500 board's ability to connect to a
 GPRS network. It asks for APN information through the
 serial monitor and tries to connect to example.org.

 Circuit:
 * MKR NB 1500 board
 * Antenna
 * SIM card with data plan  

 Created 18 Jun 2012
 by David del Peral
*/

// libraries
#include <MKRNB.h>

// Please enter your sensitive data in the Secret tab or arduino_secrets.h
// PIN Number
const char PINNUMBER[] = "";

// initialize the library instance
NB nbAccess(1);        // NB access: include a 'true' parameter for debug enabled
GPRS gprsAccess;  // GPRS access
NBClient client;  // Client service for TCP connection

// An UDP instance to let us send and receive packets over UDP
NBUDP udp;


// messages for serial monitor response
String oktext = "OK";
String errortext = "ERROR";

// URL and path (for example: example.org)
char url[] = "52.17.209.228";
char path[] = "/";

// variable for save response obtained
String response = "";

// use a proxy
boolean use_proxy = false;

void setup() {
  // initialize serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }
  MODEM.begin();
}

void loop() {
  use_proxy = false;
  
  // start module
  // if your SIM has PIN, pass it as a parameter of begin() in quotes

  Serial.println("done.");
  Serial.print("Connecting NB IoT / LTE Cat M1 network...");

  if (nbAccess.begin(NULL, "horusiot.gdsp") != NB_READY) {
    Serial.println(errortext);
    while (true);
  }
  
  Serial.println(oktext);

  // attach GPRS
  Serial.println("Attaching to GPRS...");
  if (gprsAccess.attachGPRS() != GPRS_READY) {
    Serial.println(errortext);
  } else {

  Serial.println(oktext);
  udp.begin(3000);

  createEvent("NewTemperature","30");
 
  }

  Serial.println("Finished job.");
  while(true);
}

/*
  Read input serial
 */
int readSerial(char result[]) {
  int i = 0;
  while (1) {
    while (Serial.available() > 0) {
      char inChar = Serial.read();
      if (inChar == '\n') {
        result[i] = '\0';
        return 0;
      }
      if (inChar != '\r') {
        result[i] = inChar;
        i++;
      }
    }
  }
}

char *_calloc_char(size_t num)
{
    return (char *) calloc(num, sizeof(char));

}


void createEvent(String name, String data)
{

  char *command;

  String header = "40020000b66576656e7473ff"; // 4-version, type    0-TKL    02-POST   0-ID    6576656e7473-events   ff-payload marker
  String payload_ascii = "{\"accessToken\":\"d_sk_jzOtr6jpREhOFpZpNYHFWQWB\",\"name\":\"" + name + "\",\"data\":\"" + data + "\"}";
  String payload = stringToHex( payload_ascii );
  String packet = header + payload;

  Serial.println("Payload Ready :" + payload_ascii);
  Serial.println("Packet Ready  :" + packet);

  command = _calloc_char( 256 );
  sprintf(command, packet.c_str());

  udp.beginPacket(url, 5683); //UDP messages are to port 1200
  udp.write(command);
  udp.endPacket();

  free(command);
}

String stringToHex(String input){
  String hex = "";
  for(int i = 0 ; i < input.length(); i++){
    char c = input.charAt(i);
    hex+= String(c, HEX);
  }
  return hex;
}
